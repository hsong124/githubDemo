name: Docker Update AWS Lambda

on:
  push:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v1
        - name: Login to DockerHub Registry
          run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        - name: Build the Docker image
          run: docker build -t mylambda .
        - name: Push the tagged Docker image
          run: docker run --rm -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID}} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} -e AWS_SESSION_TOKEN=${{secrets.AWS_SESSION_TOKEN}} mylambda

# tried to use the below setup but kept getting unrecognized client errors, maybe would work with selfhosted runners
# name: deploy to lambda
# on: [push]

# jobs:
#   deploy_zip:
#     name: deploy lambda function
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         go-version: [1.13.x]
#     steps:
#       - name: checkout source code
#         uses: actions/checkout@v1
#       - name: Install Go
#         uses: actions/setup-go@v1
#         with:
#           go-version: ${{ matrix.go-version }}
#       - name: View directory
#         run: ls
#       # - name: Build binary
#       #   run: |
#       #     cd example && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -v -a -o main main.go && zip deployment.zip main
#       - name: default deploy
#         uses: appleboy/lambda-action@master
#         with:
#           aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws_region: ${{ secrets.AWS_REGION }}
#           AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN}}
#           function_name: heatherTest
#           zip_file: lambda.zip